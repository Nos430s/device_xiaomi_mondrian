diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 6b34f46e1b03..974df26780d5 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -4596,7 +4596,37 @@ public final class Settings {
          * SCREEN_BRIGHTNESS_MODE value for automatic mode.
          */
         public static final int SCREEN_BRIGHTNESS_MODE_AUTOMATIC = 1;
+        
+        /**
+         * Screen resolution mode.
+         *  0 = disable
+         *  1 = overlay size
+         * @hide
+         */
+        @Readable
+        public static final String SCREEN_RESOLUTION_MODE = "screen_resolution_mode";
+
+        /**
+         * Override resolution width.
+         * @hide
+         */
+        @Readable
+        public static final String SCREEN_OVERRIDE_WIDTH = "screen_override_width";
 
+        /**
+         * Override resolution height.
+         * @hide
+         */
+        @Readable
+        public static final String SCREEN_OVERRIDE_HEIGHT = "screen_override_height";
+
+        /**
+         * Override resolution density.
+         * @hide
+         */
+        @Readable
+        public static final String SCREEN_OVERRIDE_DENSITY = "screen_override_density";
+        
         /**
          * Control whether to enable adaptive sleep mode.
          * @deprecated Use {@link android.provider.Settings.Secure#ADAPTIVE_SLEEP} instead.
diff --git a/packages/SettingsLib/src/com/android/settingslib/display/DisplayDensityUtils.java b/packages/SettingsLib/src/com/android/settingslib/display/DisplayDensityUtils.java
index ac7be53b7169..16725f28797e 100644
--- a/packages/SettingsLib/src/com/android/settingslib/display/DisplayDensityUtils.java
+++ b/packages/SettingsLib/src/com/android/settingslib/display/DisplayDensityUtils.java
@@ -18,10 +18,12 @@ package com.android.settingslib.display;
 
 import android.content.Context;
 import android.content.res.Resources;
+import android.graphics.Point;
 import android.hardware.display.DisplayManager;
 import android.os.AsyncTask;
 import android.os.RemoteException;
 import android.os.UserHandle;
+import android.provider.Settings;
 import android.util.DisplayMetrics;
 import android.util.Log;
 import android.util.MathUtils;
@@ -132,7 +134,7 @@ public class DisplayDensityUtils {
             }
 
             final int defaultDensity = DisplayDensityUtils.getDefaultDensityForDisplay(
-                    display.getDisplayId());
+                    context, display.getDisplayId());
             if (defaultDensity <= 0) {
                 Log.w(LOG_TAG, "Cannot fetch default density for display "
                         + display.getDisplayId());
@@ -248,10 +250,22 @@ public class DisplayDensityUtils {
      * @return the default density of the specified display, or {@code -1} if
      *         the display does not exist or the density could not be obtained
      */
-    private static int getDefaultDensityForDisplay(int displayId) {
+    private static int getDefaultDensityForDisplay(Context context, int displayId) {
        try {
-           final IWindowManager wm = WindowManagerGlobal.getWindowManagerService();
-           return wm.getInitialDisplayDensity(displayId);
+            int overrideWidth = Settings.System.getIntForUser(context.getContentResolver(), 
+                Settings.System.SCREEN_OVERRIDE_WIDTH, 0, UserHandle.USER_CURRENT);
+            int overrideHeight = Settings.System.getIntForUser(context.getContentResolver(), 
+                Settings.System.SCREEN_OVERRIDE_HEIGHT, 0, UserHandle.USER_CURRENT);
+            int overrideDensity = Settings.System.getIntForUser(context.getContentResolver(), 
+                Settings.System.SCREEN_OVERRIDE_DENSITY, 0, UserHandle.USER_CURRENT);
+                
+            final IWindowManager wm = WindowManagerGlobal.getWindowManagerService();
+            Point size = new Point();
+            wm.getBaseDisplaySize(displayId, size);
+            if (size.x == overrideWidth && size.y == overrideHeight && overrideDensity > 0) {
+                return overrideDensity;
+            }
+            return wm.getInitialDisplayDensity(displayId);
        } catch (RemoteException exc) {
            return -1;
        }
diff --git a/packages/SettingsProvider/src/android/provider/settings/validators/SystemSettingsValidators.java b/packages/SettingsProvider/src/android/provider/settings/validators/SystemSettingsValidators.java
index 361209c69d10..20c980968447 100644
--- a/packages/SettingsProvider/src/android/provider/settings/validators/SystemSettingsValidators.java
+++ b/packages/SettingsProvider/src/android/provider/settings/validators/SystemSettingsValidators.java
@@ -114,6 +114,10 @@ public class SystemSettingsValidators {
         VALIDATORS.put(System.SCREEN_OFF_TIMEOUT, NON_NEGATIVE_INTEGER_VALIDATOR);
         VALIDATORS.put(System.SCREEN_BRIGHTNESS_FOR_VR, new InclusiveIntegerRangeValidator(0, 255));
         VALIDATORS.put(System.SCREEN_BRIGHTNESS_MODE, BOOLEAN_VALIDATOR);
+        VALIDATORS.put(System.SCREEN_RESOLUTION_MODE, NON_NEGATIVE_INTEGER_VALIDATOR);
+        VALIDATORS.put(System.SCREEN_OVERRIDE_WIDTH, NON_NEGATIVE_INTEGER_VALIDATOR);
+        VALIDATORS.put(System.SCREEN_OVERRIDE_HEIGHT, NON_NEGATIVE_INTEGER_VALIDATOR);
+        VALIDATORS.put(System.SCREEN_OVERRIDE_DENSITY, NON_NEGATIVE_INTEGER_VALIDATOR);
         VALIDATORS.put(System.ADAPTIVE_SLEEP, BOOLEAN_VALIDATOR);
         VALIDATORS.put(System.MODE_RINGER_STREAMS_AFFECTED, NON_NEGATIVE_INTEGER_VALIDATOR);
         VALIDATORS.put(System.MUTE_STREAMS_AFFECTED, NON_NEGATIVE_INTEGER_VALIDATOR);
diff --git a/services/core/java/com/android/server/am/BroadcastQueue.java b/services/core/java/com/android/server/am/BroadcastQueue.java
index 621e3dbde360..ebe746e497bc 100644
--- a/services/core/java/com/android/server/am/BroadcastQueue.java
+++ b/services/core/java/com/android/server/am/BroadcastQueue.java
@@ -1724,12 +1724,15 @@ public final class BroadcastQueue {
                             && ((r.intent.getFlags()
                                     & Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND) == 0)
                             && !isSignaturePerm(r.requiredPermissions))) {
-                    mService.addBackgroundCheckViolationLocked(r.intent.getAction(),
-                            component.getPackageName());
-                    Slog.w(TAG, "Background execution not allowed: receiving "
-                            + r.intent + " to "
-                            + component.flattenToShortString());
-                    skip = true;
+                    if (!component.flattenToShortString().equals(
+                            "org.pixelexperience.settings/.ScreenBroadcastReceiver")) {
+                        mService.addBackgroundCheckViolationLocked(r.intent.getAction(),
+                                component.getPackageName());
+                        Slog.w(TAG, "Background execution not allowed: receiving "
+                                + r.intent + " to "
+                                + component.flattenToShortString());
+                        skip = true;
+                    }
                 }
             }
         }
diff --git a/services/core/java/com/android/server/wm/WindowManagerService.java b/services/core/java/com/android/server/wm/WindowManagerService.java
index 2a54ca6b3a62..9f297b9a74be 100644
--- a/services/core/java/com/android/server/wm/WindowManagerService.java
+++ b/services/core/java/com/android/server/wm/WindowManagerService.java
@@ -361,6 +361,7 @@ public class WindowManagerService extends IWindowManager.Stub
     private static final int TRACE_MAX_SECTION_NAME_LENGTH = 127;
 
     static final int LAYOUT_REPEAT_THRESHOLD = 4;
+    static final int OVERRIDE_DEFAULT_DENSITY = 420;
 
     static final boolean PROFILE_ORIENTATION = false;
     static WindowState mFocusingWindow;
@@ -3666,6 +3667,11 @@ public class WindowManagerService extends IWindowManager.Stub
         }
     }
 
+    private boolean isOverrideSize(DisplayContent displayContent) {
+        return (displayContent.mBaseDisplayWidth != displayContent.mInitialDisplayWidth || 
+            displayContent.mBaseDisplayHeight != displayContent.mInitialDisplayHeight);
+    }
+
     public void setCurrentUser(final int newUserId, final int[] currentProfileIds) {
         synchronized (mGlobalLock) {
             mCurrentUserId = newUserId;
@@ -3683,10 +3689,24 @@ public class WindowManagerService extends IWindowManager.Stub
             // If the display is already prepared, update the density.
             // Otherwise, we'll update it when it's prepared.
             if (mDisplayReady) {
+                int currentResolutionMode = isOverrideSize(displayContent) ? 1 : 0;
+                int resolutionMode = Settings.System.getIntForUser(mContext.getContentResolver(),
+                    Settings.System.SCREEN_RESOLUTION_MODE, 0, newUserId);
+                
+                final int initialDisplayDensity = isOverrideSize(displayContent) ? 
+                        OVERRIDE_DEFAULT_DENSITY : displayContent.mInitialDisplayDensity;
                 final int forcedDensity = getForcedDisplayDensityForUserLocked(newUserId);
                 final int targetDensity = forcedDensity != 0 ? forcedDensity
-                        : displayContent.mInitialDisplayDensity;
-                displayContent.setForcedDensity(targetDensity, UserHandle.USER_CURRENT);
+                        : initialDisplayDensity;
+
+                if (currentResolutionMode != resolutionMode) {
+                    Settings.System.putIntForUser(mContext.getContentResolver(),
+                            Settings.System.SCREEN_RESOLUTION_MODE, 
+                            currentResolutionMode, newUserId);
+                    displayContent.setForcedDensity(initialDisplayDensity, UserHandle.USER_CURRENT);
+                } else {
+                    displayContent.setForcedDensity(targetDensity, UserHandle.USER_CURRENT);
+                }
             }
         }
     }
@@ -5853,6 +5873,13 @@ public class WindowManagerService extends IWindowManager.Stub
     private boolean applyForcedPropertiesForDefaultDisplay() {
         boolean changed = false;
         final DisplayContent displayContent = getDefaultDisplayContentLocked();
+
+        // reset forced size and density
+        displayContent.setForcedSize(displayContent.mInitialDisplayWidth,
+                displayContent.mInitialDisplayHeight);
+        displayContent.setForcedDensity(displayContent.mInitialDisplayDensity, 
+                mCurrentUserId);
+    
         // Display size.
         String sizeStr = Settings.Global.getString(mContext.getContentResolver(),
                 Settings.Global.DISPLAY_SIZE_FORCED);
